import { Equal, Expect } from 'type-testing';

// type definitions
/** because "dashing" implies speed */
type Dasher = 'üí®';

/** representing dancing or grace */
type Dancer = 'üíÉ';

/** a deer, prancing */
type Prancer = 'ü¶å';

/** a star for the dazzling, slightly mischievous Vixen */
type Vixen = 'üåü';

/** for the celestial body that shares its name */
type Comet = '‚òÑÔ∏è';

/** symbolizing love, as Cupid is the god of love */
type Cupid = '‚ù§Ô∏è';

/** representing thunder, as "Donner" means thunder in German */
type Donner = 'üå©Ô∏è';

/** meaning lightning in German, hence the lightning bolt */
type Blitzen = '‚ö°';

/** for his famous red nose */
type Rudolph = 'üî¥';

type Reindeer = Dasher | Dancer | Prancer | Vixen | Comet | Cupid | Donner | Blitzen | Rudolph;

type Contains<Arr extends unknown[], Item extends string> =
  Arr extends [infer First, ...infer Rest] ?
	  First extends Item ?
		  true :
	    Contains<Rest, Item> :
	false
;

type NonRepeating<Arr extends unknown[]> =
  // going "brute-force" here, and checking if the array contains every kind of reindeer
  Contains<Arr, Dasher> extends false ? false :
	Contains<Arr, Dancer> extends false ? false :
	Contains<Arr, Prancer> extends false ? false :
	Contains<Arr, Vixen> extends false ? false :
	Contains<Arr, Comet> extends false ? false :
	Contains<Arr, Cupid> extends false ? false :
	Contains<Arr, Donner> extends false ? false :
	Contains<Arr, Blitzen> extends false ? false :
	Contains<Arr, Rudolph> extends false ? false :
	true
;

type Row<Board extends Reindeer[][][], M extends number> =
  [...Board[M][0], ...Board[M][1], ...Board[M][2]]
;

type Column<Board extends Reindeer[][][], N extends number> =
	// again, a brute force approach :)
	N extends 0 ? [Board[0][0][0], Board[1][0][0], Board[2][0][0], Board[3][0][0], Board[4][0][0], Board[5][0][0], Board[6][0][0], Board[7][0][0], Board[8][0][0]] :
	N extends 1 ? [Board[0][0][1], Board[1][0][1], Board[2][0][1], Board[3][0][1], Board[4][0][1], Board[5][0][1], Board[6][0][1], Board[7][0][1], Board[8][0][1]] :
	N extends 2 ? [Board[0][0][2], Board[1][0][2], Board[2][0][2], Board[3][0][2], Board[4][0][2], Board[5][0][2], Board[6][0][2], Board[7][0][2], Board[8][0][2]] :

	N extends 3 ? [Board[0][1][0], Board[1][1][0], Board[2][1][0], Board[3][1][0], Board[4][1][0], Board[5][1][0], Board[6][1][0], Board[7][1][0], Board[8][1][0]] :
	N extends 4 ? [Board[0][1][1], Board[1][1][1], Board[2][1][1], Board[3][1][1], Board[4][1][1], Board[5][1][1], Board[6][1][1], Board[7][1][1], Board[8][1][1]] :
	N extends 5 ? [Board[0][1][2], Board[1][1][2], Board[2][1][2], Board[3][1][2], Board[4][1][2], Board[5][1][2], Board[6][1][2], Board[7][1][2], Board[8][1][2]] :
  
	N extends 6 ? [Board[0][2][0], Board[1][2][0], Board[2][2][0], Board[3][2][0], Board[4][2][0], Board[5][2][0], Board[6][2][0], Board[7][2][0], Board[8][2][0]] :
	N extends 7 ? [Board[0][2][1], Board[1][2][1], Board[2][2][1], Board[3][2][1], Board[4][2][1], Board[5][2][1], Board[6][2][1], Board[7][2][1], Board[8][2][1]] :
	N extends 8 ? [Board[0][2][2], Board[1][2][2], Board[2][2][2], Board[3][2][2], Board[4][2][2], Board[5][2][2], Board[6][2][2], Board[7][2][2], Board[8][2][2]] :
	never
;

type Box<SubList1 extends Reindeer[], SubList2 extends Reindeer[], SubList3 extends Reindeer[]> =
  [...SubList1, ...SubList2, ...SubList3]
;

type Validate<Board extends Reindeer[][][]> =
  // more brutish behaviour
	// rows
	NonRepeating<Row<Board, 0>> extends false ? false :
  NonRepeating<Row<Board, 1>> extends false ? false :
	NonRepeating<Row<Board, 2>> extends false ? false :
	NonRepeating<Row<Board, 3>> extends false ? false :
	NonRepeating<Row<Board, 4>> extends false ? false :
	NonRepeating<Row<Board, 5>> extends false ? false :
	NonRepeating<Row<Board, 6>> extends false ? false :
	NonRepeating<Row<Board, 7>> extends false ? false :
	NonRepeating<Row<Board, 8>> extends false ? false :
	// columns
	NonRepeating<Column<Board, 0>> extends false ? false :
	NonRepeating<Column<Board, 1>> extends false ? false :
	NonRepeating<Column<Board, 2>> extends false ? false :
	NonRepeating<Column<Board, 3>> extends false ? false :
	NonRepeating<Column<Board, 4>> extends false ? false :
	NonRepeating<Column<Board, 5>> extends false ? false :
	NonRepeating<Column<Board, 6>> extends false ? false :
	NonRepeating<Column<Board, 7>> extends false ? false :
	NonRepeating<Column<Board, 8>> extends false ? false :
	// 3x3 regions
  NonRepeating<Box<Board[0][0], Board[1][0], Board[2][0]>> extends false ? false : // top-left
  NonRepeating<Box<Board[0][1], Board[1][1], Board[2][1]>> extends false ? false : // top-center
	NonRepeating<Box<Board[0][2], Board[1][2], Board[2][2]>> extends false ? false : // top-right
	NonRepeating<Box<Board[3][0], Board[4][0], Board[5][0]>> extends false ? false : // middle-left
  NonRepeating<Box<Board[3][1], Board[4][1], Board[5][1]>> extends false ? false : // middle-center
	NonRepeating<Box<Board[3][2], Board[4][2], Board[5][2]>> extends false ? false : // middle-right
	NonRepeating<Box<Board[6][0], Board[7][0], Board[8][0]>> extends false ? false : // bottom-left
  NonRepeating<Box<Board[6][1], Board[7][1], Board[8][1]>> extends false ? false : // bottom-center
	NonRepeating<Box<Board[6][2], Board[7][2], Board[8][2]>> extends false ? false : // bottom-right
	true
;

// tests
type test_sudoku_1_actual = Validate<[
//   ^?
  [['üí®', 'üíÉ', 'ü¶å'], ['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', 'üî¥']],
  [['üåü', '‚ö°', 'üî¥'], ['üí®', 'üíÉ', 'ü¶å'], ['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è']],
  [['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', 'üî¥'], ['üí®', 'üíÉ', 'ü¶å']],
  [['ü¶å', 'üí®', 'üíÉ'], ['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['üî¥', 'üå©Ô∏è', 'üåü']],
  [['üå©Ô∏è', 'üî¥', 'üåü'], ['ü¶å', 'üí®', 'üíÉ'], ['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è']],
  [['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['üå©Ô∏è', 'üî¥', 'üåü'], ['ü¶å', 'üí®', 'üíÉ']],
  [['üíÉ', 'ü¶å', 'üí®'], ['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è'], ['üå©Ô∏è', 'üî¥', '‚ö°']],
  [['üî¥', 'üå©Ô∏è', '‚ö°'], ['üíÉ', 'ü¶å', 'üí®'], ['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è']],
  [['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è'], ['üî¥', 'üå©Ô∏è', '‚ö°'], ['üíÉ', 'ü¶å', 'üí®']]
]>;
type test_sudoku_1 = Expect<Equal<test_sudoku_1_actual, true>>;

type test_sudoku_2_actual = Validate<[
//   ^?
  [['üå©Ô∏è', 'üí®', '‚òÑÔ∏è'], ['üåü', 'ü¶å', '‚ö°'], ['‚ù§Ô∏è', 'üî¥', 'üíÉ']],
  [['üåü', '‚ö°', '‚ù§Ô∏è'], ['üî¥', 'üíÉ', '‚òÑÔ∏è'], ['üå©Ô∏è', 'üí®', 'ü¶å']],
  [['üî¥', 'ü¶å', 'üíÉ'], ['üí®', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', '‚òÑÔ∏è']],
  [['‚ù§Ô∏è', '‚òÑÔ∏è', 'üå©Ô∏è'], ['üíÉ', '‚ö°', 'üî¥'], ['üí®', 'ü¶å', 'üåü']],
  [['ü¶å', 'üíÉ', '‚ö°'], ['üå©Ô∏è', 'üåü', 'üí®'], ['üî¥', '‚òÑÔ∏è', '‚ù§Ô∏è']],
  [['üí®', 'üåü', 'üî¥'], ['ü¶å', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['‚ö°', 'üíÉ', 'üå©Ô∏è']],
  [['‚òÑÔ∏è', 'üî¥', 'üí®'], ['‚ù§Ô∏è', 'üå©Ô∏è', 'ü¶å'], ['üíÉ', 'üåü', '‚ö°']],
  [['üíÉ', '‚ù§Ô∏è', 'ü¶å'], ['‚ö°', 'üî¥', 'üåü'], ['‚òÑÔ∏è', 'üå©Ô∏è', 'üí®']],
  [['‚ö°', 'üå©Ô∏è', 'üåü'], ['‚òÑÔ∏è', 'üí®', 'üíÉ'], ['ü¶å', '‚ù§Ô∏è', 'üî¥']]
]>;
type test_sudoku_2 = Expect<Equal<test_sudoku_2_actual, true>>;

type test_sudoku_3_actual = Validate<[
//   ^?
  [['ü¶å', 'üî¥', 'üíÉ'], ['üå©Ô∏è', '‚òÑÔ∏è', 'üí®'], ['‚ö°', '‚ù§Ô∏è', 'üåü']],
  [['üåü', '‚ö°', 'üí®'], ['‚ù§Ô∏è', 'üíÉ', 'üî¥'], ['‚òÑÔ∏è', 'üå©Ô∏è', 'ü¶å']],
  [['‚òÑÔ∏è', 'üå©Ô∏è', '‚ù§Ô∏è'], ['‚ö°', 'üåü', 'ü¶å'], ['üíÉ', 'üî¥', 'üí®']],
  [['üå©Ô∏è', 'üíÉ', 'üî¥'], ['ü¶å', 'üí®', '‚ö°'], ['üåü', '‚òÑÔ∏è', '‚ù§Ô∏è']],
  [['‚ù§Ô∏è', '‚òÑÔ∏è', '‚ö°'], ['üíÉ', 'üå©Ô∏è', 'üåü'], ['ü¶å', 'üí®', 'üî¥']],
  [['üí®', 'üåü', 'ü¶å'], ['‚òÑÔ∏è', 'üî¥', '‚ù§Ô∏è'], ['üå©Ô∏è', 'üíÉ', '‚ö°']],
  [['üíÉ', 'üí®', 'üåü'], ['üî¥', 'ü¶å', '‚òÑÔ∏è'], ['‚ù§Ô∏è', '‚ö°', 'üå©Ô∏è']],
  [['üî¥', '‚ù§Ô∏è', '‚òÑÔ∏è'], ['üåü', '‚ö°', 'üå©Ô∏è'], ['üí®', 'ü¶å', 'üíÉ']],
  [['‚ö°', 'ü¶å', 'üå©Ô∏è'], ['üí®', '‚ù§Ô∏è', 'üíÉ'], ['üî¥', 'üåü', '‚òÑÔ∏è']]
]>;
type test_sudoku_3 = Expect<Equal<test_sudoku_3_actual, true>>;

type test_sudoku_4_actual = Validate<[
//   ^?
  [['üí®', 'üíÉ', 'ü¶å'], ['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', 'üî¥']],
  [['üåü', '‚ö°', 'üî¥'], ['üí®', 'üíÉ', 'ü¶å'], ['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è']],
  [['‚òÑÔ∏è', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', 'üî¥'], ['üí®', 'üíÉ', 'ü¶å']],
  [['ü¶å', 'üí®', 'üíÉ'], ['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['üî¥', 'üå©Ô∏è', 'üåü']],
  [['üå©Ô∏è', 'üî¥', 'üåü'], ['ü¶å', 'üí®', 'üíÉ'], ['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è']],
  [['‚ö°', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['üå©Ô∏è', 'üî¥', 'üåü'], ['ü¶å', 'üí®', 'üíÉ']],
  [['üíÉ', 'ü¶å', 'üí®'], ['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è'], ['‚ö°', 'üî¥', 'üåü']],
  [['üî¥', 'üå©Ô∏è', '‚ö°'], ['üíÉ', 'ü¶å', 'üí®'], ['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è']],
  [['‚ù§Ô∏è', 'üåü', '‚òÑÔ∏è'], ['üî¥', 'üå©Ô∏è', '‚ö°'], ['üíÉ', 'ü¶å', 'üí®']]
]>;
type test_sudoku_4 = Expect<Equal<test_sudoku_4_actual, false>>;

type test_sudoku_5_actual = Validate<[
//   ^?
  [['üå©Ô∏è', 'üí®', '‚òÑÔ∏è'], ['üåü', 'ü¶å', '‚ö°'], ['‚ù§Ô∏è', 'üî¥', 'üíÉ']],
  [['üåü', '‚ö°', '‚ù§Ô∏è'], ['üî¥', 'üíÉ', '‚òÑÔ∏è'], ['üå©Ô∏è', 'üí®', 'ü¶å']],
  [['üî¥', 'ü¶å', 'üíÉ'], ['üí®', '‚ù§Ô∏è', 'üå©Ô∏è'], ['üåü', '‚ö°', '‚òÑÔ∏è']],
  [['‚ù§Ô∏è', '‚òÑÔ∏è', 'üå©Ô∏è'], ['üíÉ', '‚ö°', 'üî¥'], ['üí®', 'ü¶å', 'üåü']],
  [['ü¶å', 'üíÉ', '‚ö°'], ['üå©Ô∏è', 'üåü', 'üí®'], ['üî¥', '‚òÑÔ∏è', '‚ù§Ô∏è']],
  [['üí®', 'üåü', 'üî¥'], ['ü¶å', '‚òÑÔ∏è', '‚ù§Ô∏è'], ['‚ö°', 'üíÉ', 'üå©Ô∏è']],
  [['‚òÑÔ∏è', 'üî¥', 'üí®'], ['‚ù§Ô∏è', 'üíÉ', 'ü¶å'], ['üíÉ', 'üåü', '‚ö°']],
  [['üíÉ', '‚ù§Ô∏è', 'ü¶å'], ['‚ö°', 'üî¥', 'üåü'], ['‚òÑÔ∏è', 'üå©Ô∏è', 'üí®']],
  [['‚ö°', 'üå©Ô∏è', 'üåü'], ['‚òÑÔ∏è', 'üí®', 'üíÉ'], ['ü¶å', '‚ù§Ô∏è', 'üî¥']]
]>;
type test_sudoku_5 = Expect<Equal<test_sudoku_5_actual, false>>;

type test_sudoku_6_actual = Validate<[
//   ^?
  [['‚ö°', 'üî¥', 'üå©Ô∏è'], ['ü¶å', '‚ù§Ô∏è', 'üí®'], ['üí®', 'üåü', '‚òÑÔ∏è']],
  [['‚ù§Ô∏è', 'ü¶å', 'üåü'], ['üí®', 'üåü', 'üî¥'], ['üíÉ', '‚ö°', 'üå©Ô∏è']],
  [['üí®', 'üíÉ', 'üåü'], ['‚òÑÔ∏è', '‚ö°', 'üå©Ô∏è'], ['üî¥', '‚ù§Ô∏è', 'ü¶å']],
  [['ü¶å', '‚ö°', 'üî¥'], ['‚ù§Ô∏è', 'üíÉ', 'üí®'], ['‚òÑÔ∏è', 'üå©Ô∏è', 'üåü']],
  [['üåü', 'üå©Ô∏è', 'üíÉ'], ['‚ö°', 'üî¥', '‚òÑÔ∏è'], ['‚ù§Ô∏è', 'ü¶å', 'üí®']],
  [['‚òÑÔ∏è', 'üí®', '‚ù§Ô∏è'], ['üåü', 'üå©Ô∏è', 'ü¶å'], ['‚ö°', 'üíÉ', 'üî¥']],
  [['üå©Ô∏è', '‚òÑÔ∏è', 'üí®'], ['üíÉ', 'ü¶å', '‚ö°'], ['üåü', 'üî¥', '‚ù§Ô∏è']],
  [['üî¥', '‚ù§Ô∏è', '‚ö°'], ['üå©Ô∏è', '‚òÑÔ∏è', 'üåü'], ['ü¶å', 'üí®', 'üíÉ']],
  [['üíÉ', 'üåü', 'ü¶å'], ['üî¥', 'üí®', '‚ù§Ô∏è'], ['üå©Ô∏è', '‚òÑÔ∏è', '‚ö°']]
]>;
type test_sudoku_6 = Expect<Equal<test_sudoku_6_actual, false>>;
